# name: test_itf_parse[tests/traces/itf/IBCTransferAcknowledgePacketInv_counterexample1.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 1>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferReceivePacket", packet |-> [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>, <<2, 2>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({<<2, SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>})>>}), supply |-> SetAsFun({<<1, 6>>, <<2, 2>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 1>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferAcknowledgePacket", packet |-> [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>, <<2, 2>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({<<2, SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>})>>}), supply |-> SetAsFun({<<1, 6>>, <<2, 2>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 1>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {}, success |-> {0} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.name',
          'Null',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).bank(2)(2)',
          3,
          1,
        ),
        tuple(
          '.chains(2).escrow(1)(2)',
          None,
          2,
        ),
        tuple(
          '.chains(2).localPackets.list(0)',
          None,
          [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(2).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'IBCTransferReceivePacket',
        ),
        tuple(
          '.chains(1).bank(2)(2)',
          None,
          2,
        ),
        tuple(
          '.chains(1).remotePackets(2)',
          None,
          SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}),
        ),
        tuple(
          '.chains(1).supply(2)',
          None,
          2,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferReceivePacket',
          'IBCTransferAcknowledgePacket',
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          0,
          None,
        ),
        tuple(
          '.chains(2).localPackets.success{}',
          None,
          0,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse[tests/traces/itf/IBCTransferAcknowledgePacketInv_counterexample2.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 0>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 2, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 2, target |-> 1 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 1>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 0>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferAcknowledgePacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {}, success |-> {0} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.amount',
          None,
          2,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'Null',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          2,
        ),
        tuple(
          '.action.target',
          None,
          1,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          5,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          2,
          None,
        ),
        tuple(
          '.action.chainId',
          1,
          None,
        ),
        tuple(
          '.action.denom',
          1,
          None,
        ),
        tuple(
          '.action.name',
          'LocalTransfer',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.action.source',
          2,
          None,
        ),
        tuple(
          '.action.target',
          1,
          None,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          1,
          0,
        ),
        tuple(
          '.chains(1).escrow(2)(1)',
          0,
          1,
        ),
        tuple(
          '.chains(1).localPackets.list(0)',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(1).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'IBCTransferAcknowledgePacket',
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          0,
          None,
        ),
        tuple(
          '.chains(1).localPackets.success{}',
          None,
          0,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse[tests/traces/itf/IBCTransferTimeoutPacketInv_counterexample1.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 3, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 2, target |-> 1 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "InterruptRelay" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
      (action = [ name |-> "IBCTransferTimeoutPacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 6>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 0>>})>>}), id |-> 1, localPackets |-> [ expired |-> {0}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
    ]),
    list([
      list([
        tuple(
          '.action.name',
          'Null',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).escrow(2)(1)',
          None,
          1,
        ),
        tuple(
          '.chains(1).localPackets.list(0)',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(1).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          None,
          3,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'LocalTransfer',
        ),
        tuple(
          '.action.packet',
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
          None,
        ),
        tuple(
          '.action.source',
          None,
          2,
        ),
        tuple(
          '.action.target',
          None,
          1,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          2,
          5,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          0,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          3,
          None,
        ),
        tuple(
          '.action.chainId',
          1,
          None,
        ),
        tuple(
          '.action.denom',
          1,
          None,
        ),
        tuple(
          '.action.name',
          'LocalTransfer',
          'InterruptRelay',
        ),
        tuple(
          '.action.source',
          2,
          None,
        ),
        tuple(
          '.action.target',
          1,
          None,
        ),
        tuple(
          '.relayerRunning',
          True,
          False,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'InterruptRelay',
          'IBCTransferTimeoutPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          5,
          6,
        ),
        tuple(
          '.chains(1).escrow(2)(1)',
          1,
          0,
        ),
        tuple(
          '.chains(1).localPackets.expired{}',
          None,
          0,
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          0,
          None,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse[tests/traces/itf/IBCTransferTimeoutPacketInv_counterexample2.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 1>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "InterruptRelay" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 1>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
      (action = [ amount |-> 1, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 1, target |-> 2 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 1>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
      (action = [ name |-> "IBCTransferTimeoutPacket", packet |-> [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {0}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
    ]),
    list([
      list([
        tuple(
          '.action.name',
          'Null',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).bank(1)(2)',
          3,
          2,
        ),
        tuple(
          '.chains(2).escrow(1)(2)',
          None,
          1,
        ),
        tuple(
          '.chains(2).localPackets.list(0)',
          None,
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(2).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'InterruptRelay',
        ),
        tuple(
          '.action.packet',
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
          None,
        ),
        tuple(
          '.relayerRunning',
          True,
          False,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          None,
          1,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'InterruptRelay',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          1,
        ),
        tuple(
          '.action.target',
          None,
          2,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          4,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          1,
          None,
        ),
        tuple(
          '.action.chainId',
          1,
          None,
        ),
        tuple(
          '.action.denom',
          1,
          None,
        ),
        tuple(
          '.action.name',
          'LocalTransfer',
          'IBCTransferTimeoutPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.action.source',
          1,
          None,
        ),
        tuple(
          '.action.target',
          2,
          None,
        ),
        tuple(
          '.chains(2).bank(1)(2)',
          2,
          3,
        ),
        tuple(
          '.chains(2).escrow(1)(2)',
          1,
          0,
        ),
        tuple(
          '.chains(2).localPackets.expired{}',
          None,
          0,
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          0,
          None,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse[tests/traces/itf/LocalTransferInv_counterexample1.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 1, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 1, target |-> 2 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.amount',
          None,
          1,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'Null',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          1,
        ),
        tuple(
          '.action.target',
          None,
          2,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          4,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse[tests/traces/itf/LocalTransferInv_counterexample2.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 1, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 1, target |-> 2 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.amount',
          None,
          1,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'Null',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          1,
        ),
        tuple(
          '.action.target',
          None,
          2,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          4,
        ),
      ]),
    ]),
  )
# ---
