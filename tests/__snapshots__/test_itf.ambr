# name: test_itf_diff_print[tests/traces/itf/IBCTransferAcknowledgePacketInv_counterexample1.itf.json]
  '''
  path                               prev_state    next_state
  ---------------------------------  ------------  -------------------------------------------------------------------------------------------------------
  .action.name                       Null          IBCTransferSendPacket
  .action.packet                                   [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]
  .chains(2).bank(2)(2)              3             1
  .chains(2).escrow(1)(2)                          2
  .chains(2).localPackets.list(0)                  [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]
  .chains(2).localPackets.pending{}                0
  .chains(2).nextPacketId            0             1
  
  path                         prev_state             next_state
  ---------------------------  ---------------------  --------------------------------------------------------------------------------------------------------------------------
  .action.name                 IBCTransferSendPacket  IBCTransferReceivePacket
  .chains(1).bank(2)(2)                               2
  .chains(1).remotePackets(2)                         SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>})
  .chains(1).supply(2)                                2
  
  path                               prev_state                next_state
  ---------------------------------  ------------------------  ----------------------------
  .action.name                       IBCTransferReceivePacket  IBCTransferAcknowledgePacket
  .chains(2).localPackets.pending{}  0
  .chains(2).localPackets.success{}                            0
  
  
  '''
# ---
# name: test_itf_diff_print[tests/traces/itf/IBCTransferAcknowledgePacketInv_counterexample2.itf.json]
  '''
  path                   prev_state    next_state
  ---------------------  ------------  -------------
  .action.amount                       2
  .action.chainId                      1
  .action.denom                        1
  .action.name           Null          LocalTransfer
  .action.source                       2
  .action.target                       1
  .chains(1).bank(1)(1)  3             5
  .chains(1).bank(2)(1)  3             1
  
  path                               prev_state     next_state
  ---------------------------------  -------------  -------------------------------------------------------------------------------------------------------
  .action.amount                     2
  .action.chainId                    1
  .action.denom                      1
  .action.name                       LocalTransfer  IBCTransferSendPacket
  .action.packet                                    [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]
  .action.source                     2
  .action.target                     1
  .chains(1).bank(2)(1)              1              0
  .chains(1).escrow(2)(1)            0              1
  .chains(1).localPackets.list(0)                   [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]
  .chains(1).localPackets.pending{}                 0
  .chains(1).nextPacketId            0              1
  
  path                               prev_state             next_state
  ---------------------------------  ---------------------  ----------------------------
  .action.name                       IBCTransferSendPacket  IBCTransferAcknowledgePacket
  .chains(1).localPackets.pending{}  0
  .chains(1).localPackets.success{}                         0
  
  
  '''
# ---
# name: test_itf_diff_print[tests/traces/itf/IBCTransferTimeoutPacketInv_counterexample1.itf.json]
  '''
  path                               prev_state    next_state
  ---------------------------------  ------------  -------------------------------------------------------------------------------------------------------
  .action.name                       Null          IBCTransferSendPacket
  .action.packet                                   [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]
  .chains(1).bank(1)(1)              3             2
  .chains(1).escrow(2)(1)                          1
  .chains(1).localPackets.list(0)                  [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]
  .chains(1).localPackets.pending{}                0
  .chains(1).nextPacketId            0             1
  
  path                   prev_state                                                                                               next_state
  ---------------------  -------------------------------------------------------------------------------------------------------  -------------
  .action.amount                                                                                                                  3
  .action.chainId                                                                                                                 1
  .action.denom                                                                                                                   1
  .action.name           IBCTransferSendPacket                                                                                    LocalTransfer
  .action.packet         [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]
  .action.source                                                                                                                  2
  .action.target                                                                                                                  1
  .chains(1).bank(1)(1)  2                                                                                                        5
  .chains(1).bank(2)(1)  3                                                                                                        0
  
  path             prev_state     next_state
  ---------------  -------------  --------------
  .action.amount   3
  .action.chainId  1
  .action.denom    1
  .action.name     LocalTransfer  InterruptRelay
  .action.source   2
  .action.target   1
  .relayerRunning  True           False
  
  path                               prev_state      next_state
  ---------------------------------  --------------  -------------------------------------------------------------------------------------------------------
  .action.name                       InterruptRelay  IBCTransferTimeoutPacket
  .action.packet                                     [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]
  .chains(1).bank(1)(1)              5               6
  .chains(1).escrow(2)(1)            1               0
  .chains(1).localPackets.expired{}                  0
  .chains(1).localPackets.pending{}  0
  
  
  '''
# ---
# name: test_itf_diff_print[tests/traces/itf/IBCTransferTimeoutPacketInv_counterexample2.itf.json]
  '''
  path                               prev_state    next_state
  ---------------------------------  ------------  -------------------------------------------------------------------------------------------------------
  .action.name                       Null          IBCTransferSendPacket
  .action.packet                                   [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]
  .chains(2).bank(1)(2)              3             2
  .chains(2).escrow(1)(2)                          1
  .chains(2).localPackets.list(0)                  [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]
  .chains(2).localPackets.pending{}                0
  .chains(2).nextPacketId            0             1
  
  path             prev_state                                                                                               next_state
  ---------------  -------------------------------------------------------------------------------------------------------  --------------
  .action.name     IBCTransferSendPacket                                                                                    InterruptRelay
  .action.packet   [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]
  .relayerRunning  True                                                                                                     False
  
  path                   prev_state      next_state
  ---------------------  --------------  -------------
  .action.amount                         1
  .action.chainId                        1
  .action.denom                          1
  .action.name           InterruptRelay  LocalTransfer
  .action.source                         1
  .action.target                         2
  .chains(1).bank(1)(1)  3               2
  .chains(1).bank(2)(1)  3               4
  
  path                               prev_state     next_state
  ---------------------------------  -------------  -------------------------------------------------------------------------------------------------------
  .action.amount                     1
  .action.chainId                    1
  .action.denom                      1
  .action.name                       LocalTransfer  IBCTransferTimeoutPacket
  .action.packet                                    [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]
  .action.source                     1
  .action.target                     2
  .chains(2).bank(1)(2)              2              3
  .chains(2).escrow(1)(2)            1              0
  .chains(2).localPackets.expired{}                 0
  .chains(2).localPackets.pending{}  0
  
  
  '''
# ---
# name: test_itf_diff_print[tests/traces/itf/LocalTransferInv_counterexample1.itf.json]
  '''
  path                   prev_state    next_state
  ---------------------  ------------  -------------
  .action.amount                       1
  .action.chainId                      1
  .action.denom                        1
  .action.name           Null          LocalTransfer
  .action.source                       1
  .action.target                       2
  .chains(1).bank(1)(1)  3             2
  .chains(1).bank(2)(1)  3             4
  
  
  '''
# ---
# name: test_itf_diff_print[tests/traces/itf/LocalTransferInv_counterexample2.itf.json]
  '''
  path                   prev_state    next_state
  ---------------------  ------------  -------------
  .action.amount                       1
  .action.chainId                      1
  .action.denom                        1
  .action.name           Null          LocalTransfer
  .action.source                       1
  .action.target                       2
  .chains(1).bank(1)(1)  3             2
  .chains(1).bank(2)(1)  3             4
  
  
  '''
# ---
# name: test_itf_diff_print[tests/traces/itf/TupleAndBigint.itf.json]
  '''
  path                    prev_state                       next_state
  ----------------------  -------------------------------  -------------------------------
  .action.tag             Init                             Transfer
  .action.value.amount                                     3
  .action.value.receiver                                   "Alice"
  .action.value.sender                                     "Bob"
  .action.value.wallets   <<"Alice", "Bob">>
  .balances("Alice")      1000000000000000000000000000001  1000000000000000000000000000004
  .balances("Bob")        1000000000000000000000000000001  999999999999999999999999999998
  .step                   0                                1
  
  path                    prev_state                       next_state
  ----------------------  -------------------------------  -------------------------------
  .action.value.amount    3                                1
  .action.value.receiver  Alice                            Bob
  .action.value.sender    Bob                              Alice
  .balances("Alice")      1000000000000000000000000000004  1000000000000000000000000000003
  .balances("Bob")        999999999999999999999999999998   999999999999999999999999999999
  .step                   1                                2
  
  path                                     prev_state                       next_state
  ------------------  -------------------------------  -------------------------------
  .balances("Alice")  1000000000000000000000000000003  1000000000000000000000000000002
  .balances("Bob")     999999999999999999999999999999  1000000000000000000000000000000
  .step                                             2                                3
  
  path                                     prev_state                       next_state
  ------------------  -------------------------------  -------------------------------
  .balances("Alice")  1000000000000000000000000000002  1000000000000000000000000000001
  .balances("Bob")    1000000000000000000000000000000  1000000000000000000000000000001
  .step                                             3                                4
  
  
  '''
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/IBCTransferAcknowledgePacketInv_counterexample1.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 1>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferReceivePacket", packet |-> [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>, <<2, 2>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({<<2, SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>})>>}), supply |-> SetAsFun({<<1, 6>>, <<2, 2>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 1>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferAcknowledgePacket", packet |-> [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>, <<2, 2>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({<<2, SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>})>>}), supply |-> SetAsFun({<<1, 6>>, <<2, 2>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 1>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {}, success |-> {0} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.name',
          'Null',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).bank(2)(2)',
          3,
          1,
        ),
        tuple(
          '.chains(2).escrow(1)(2)',
          None,
          2,
        ),
        tuple(
          '.chains(2).localPackets.list(0)',
          None,
          [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(2).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'IBCTransferReceivePacket',
        ),
        tuple(
          '.chains(1).bank(2)(2)',
          None,
          2,
        ),
        tuple(
          '.chains(1).remotePackets(2)',
          None,
          SetAsFun({<<0, [ amount |-> 2, denom |-> 2, from |-> 2, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}),
        ),
        tuple(
          '.chains(1).supply(2)',
          None,
          2,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferReceivePacket',
          'IBCTransferAcknowledgePacket',
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          0,
          None,
        ),
        tuple(
          '.chains(2).localPackets.success{}',
          None,
          0,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/IBCTransferAcknowledgePacketInv_counterexample2.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 0>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 2, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 2, target |-> 1 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 1>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 0>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferAcknowledgePacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {}, success |-> {0} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.amount',
          None,
          2,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'Null',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          2,
        ),
        tuple(
          '.action.target',
          None,
          1,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          5,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          2,
          None,
        ),
        tuple(
          '.action.chainId',
          1,
          None,
        ),
        tuple(
          '.action.denom',
          1,
          None,
        ),
        tuple(
          '.action.name',
          'LocalTransfer',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.action.source',
          2,
          None,
        ),
        tuple(
          '.action.target',
          1,
          None,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          1,
          0,
        ),
        tuple(
          '.chains(1).escrow(2)(1)',
          0,
          1,
        ),
        tuple(
          '.chains(1).localPackets.list(0)',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 2, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(1).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'IBCTransferAcknowledgePacket',
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          0,
          None,
        ),
        tuple(
          '.chains(1).localPackets.success{}',
          None,
          0,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/IBCTransferTimeoutPacketInv_counterexample1.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 3, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 2, target |-> 1 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "InterruptRelay" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 5>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 1>>})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
      (action = [ name |-> "IBCTransferTimeoutPacket", packet |-> [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 6>>})>>, <<2, SetAsFun({<<1, 0>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({<<1, 0>>})>>}), id |-> 1, localPackets |-> [ expired |-> {0}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ]>>}), pending |-> {}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
    ]),
    list([
      list([
        tuple(
          '.action.name',
          'Null',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).escrow(2)(1)',
          None,
          1,
        ),
        tuple(
          '.chains(1).localPackets.list(0)',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(1).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          None,
          3,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'LocalTransfer',
        ),
        tuple(
          '.action.packet',
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
          None,
        ),
        tuple(
          '.action.source',
          None,
          2,
        ),
        tuple(
          '.action.target',
          None,
          1,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          2,
          5,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          0,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          3,
          None,
        ),
        tuple(
          '.action.chainId',
          1,
          None,
        ),
        tuple(
          '.action.denom',
          1,
          None,
        ),
        tuple(
          '.action.name',
          'LocalTransfer',
          'InterruptRelay',
        ),
        tuple(
          '.action.source',
          2,
          None,
        ),
        tuple(
          '.action.target',
          1,
          None,
        ),
        tuple(
          '.relayerRunning',
          True,
          False,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'InterruptRelay',
          'IBCTransferTimeoutPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 1, from |-> 1, id |-> 0, sourceChainId |-> 1, targetChainId |-> 2, to |-> 2 ],
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          5,
          6,
        ),
        tuple(
          '.chains(1).escrow(2)(1)',
          1,
          0,
        ),
        tuple(
          '.chains(1).localPackets.expired{}',
          None,
          0,
        ),
        tuple(
          '.chains(1).localPackets.pending{}',
          0,
          None,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/IBCTransferTimeoutPacketInv_counterexample2.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "IBCTransferSendPacket", packet |-> [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 1>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ name |-> "InterruptRelay" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 1>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
      (action = [ amount |-> 1, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 1, target |-> 2 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 2>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 1>>})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {0}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
      (action = [ name |-> "IBCTransferTimeoutPacket", packet |-> [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ] ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({<<2, 0>>})>>}), id |-> 2, localPackets |-> [ expired |-> {0}, list |-> SetAsFun({<<0, [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ]>>}), pending |-> {}, success |-> {} ], nextPacketId |-> 1, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = False),
    ]),
    list([
      list([
        tuple(
          '.action.name',
          'Null',
          'IBCTransferSendPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).bank(1)(2)',
          3,
          2,
        ),
        tuple(
          '.chains(2).escrow(1)(2)',
          None,
          1,
        ),
        tuple(
          '.chains(2).localPackets.list(0)',
          None,
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          None,
          0,
        ),
        tuple(
          '.chains(2).nextPacketId',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.name',
          'IBCTransferSendPacket',
          'InterruptRelay',
        ),
        tuple(
          '.action.packet',
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
          None,
        ),
        tuple(
          '.relayerRunning',
          True,
          False,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          None,
          1,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'InterruptRelay',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          1,
        ),
        tuple(
          '.action.target',
          None,
          2,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          4,
        ),
      ]),
      list([
        tuple(
          '.action.amount',
          1,
          None,
        ),
        tuple(
          '.action.chainId',
          1,
          None,
        ),
        tuple(
          '.action.denom',
          1,
          None,
        ),
        tuple(
          '.action.name',
          'LocalTransfer',
          'IBCTransferTimeoutPacket',
        ),
        tuple(
          '.action.packet',
          None,
          [ amount |-> 1, denom |-> 2, from |-> 1, id |-> 0, sourceChainId |-> 2, targetChainId |-> 1, to |-> 2 ],
        ),
        tuple(
          '.action.source',
          1,
          None,
        ),
        tuple(
          '.action.target',
          2,
          None,
        ),
        tuple(
          '.chains(2).bank(1)(2)',
          2,
          3,
        ),
        tuple(
          '.chains(2).escrow(1)(2)',
          1,
          0,
        ),
        tuple(
          '.chains(2).localPackets.expired{}',
          None,
          0,
        ),
        tuple(
          '.chains(2).localPackets.pending{}',
          0,
          None,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/LocalTransferInv_counterexample1.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 1, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 1, target |-> 2 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.amount',
          None,
          1,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'Null',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          1,
        ),
        tuple(
          '.action.target',
          None,
          2,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          4,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/LocalTransferInv_counterexample2.itf.json]
  tuple(
    list([
      (action = [ name |-> "Null" ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 3>>})>>, <<2, SetAsFun({<<1, 3>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
      (action = [ amount |-> 1, chainId |-> 1, denom |-> 1, name |-> "LocalTransfer", source |-> 1, target |-> 2 ]) /\ (chains = SetAsFun({<<1, [ bank |-> SetAsFun({<<1, SetAsFun({<<1, 2>>})>>, <<2, SetAsFun({<<1, 4>>})>>}), escrow |-> SetAsFun({<<2, SetAsFun({})>>}), id |-> 1, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<1, 6>>}) ]>>, <<2, [ bank |-> SetAsFun({<<1, SetAsFun({<<2, 3>>})>>, <<2, SetAsFun({<<2, 3>>})>>}), escrow |-> SetAsFun({<<1, SetAsFun({})>>}), id |-> 2, localPackets |-> [ expired |-> {}, list |-> SetAsFun({}), pending |-> {}, success |-> {} ], nextPacketId |-> 0, remotePackets |-> SetAsFun({}), supply |-> SetAsFun({<<2, 6>>}) ]>>})) /\ (outcome = [ name |-> "Success" ]) /\ (relayerRunning = True),
    ]),
    list([
      list([
        tuple(
          '.action.amount',
          None,
          1,
        ),
        tuple(
          '.action.chainId',
          None,
          1,
        ),
        tuple(
          '.action.denom',
          None,
          1,
        ),
        tuple(
          '.action.name',
          'Null',
          'LocalTransfer',
        ),
        tuple(
          '.action.source',
          None,
          1,
        ),
        tuple(
          '.action.target',
          None,
          2,
        ),
        tuple(
          '.chains(1).bank(1)(1)',
          3,
          2,
        ),
        tuple(
          '.chains(1).bank(2)(1)',
          3,
          4,
        ),
      ]),
    ]),
  )
# ---
# name: test_itf_parse_and_diff[tests/traces/itf/TupleAndBigint.itf.json]
  tuple(
    list([
      (action = [ tag |-> "Init", value |-> [ wallets |-> <<"Alice", "Bob">> ] ]) /\ (balances = SetAsFun({<<"Alice", 1000000000000000000000000000001>>, <<"Bob", 1000000000000000000000000000001>>})) /\ (step = 0),
      (action = [ tag |-> "Transfer", value |-> [ amount |-> 3, receiver |-> "Alice", sender |-> "Bob" ] ]) /\ (balances = SetAsFun({<<"Alice", 1000000000000000000000000000004>>, <<"Bob", 999999999999999999999999999998>>})) /\ (step = 1),
      (action = [ tag |-> "Transfer", value |-> [ amount |-> 1, receiver |-> "Bob", sender |-> "Alice" ] ]) /\ (balances = SetAsFun({<<"Alice", 1000000000000000000000000000003>>, <<"Bob", 999999999999999999999999999999>>})) /\ (step = 2),
      (action = [ tag |-> "Transfer", value |-> [ amount |-> 1, receiver |-> "Bob", sender |-> "Alice" ] ]) /\ (balances = SetAsFun({<<"Alice", 1000000000000000000000000000002>>, <<"Bob", 1000000000000000000000000000000>>})) /\ (step = 3),
      (action = [ tag |-> "Transfer", value |-> [ amount |-> 1, receiver |-> "Bob", sender |-> "Alice" ] ]) /\ (balances = SetAsFun({<<"Alice", 1000000000000000000000000000001>>, <<"Bob", 1000000000000000000000000000001>>})) /\ (step = 4),
    ]),
    list([
      list([
        tuple(
          '.action.tag',
          'Init',
          'Transfer',
        ),
        tuple(
          '.action.value.amount',
          None,
          3,
        ),
        tuple(
          '.action.value.receiver',
          None,
          "Alice",
        ),
        tuple(
          '.action.value.sender',
          None,
          "Bob",
        ),
        tuple(
          '.action.value.wallets',
          <<"Alice", "Bob">>,
          None,
        ),
        tuple(
          '.balances("Alice")',
          1000000000000000000000000000001,
          1000000000000000000000000000004,
        ),
        tuple(
          '.balances("Bob")',
          1000000000000000000000000000001,
          999999999999999999999999999998,
        ),
        tuple(
          '.step',
          0,
          1,
        ),
      ]),
      list([
        tuple(
          '.action.value.amount',
          3,
          1,
        ),
        tuple(
          '.action.value.receiver',
          'Alice',
          'Bob',
        ),
        tuple(
          '.action.value.sender',
          'Bob',
          'Alice',
        ),
        tuple(
          '.balances("Alice")',
          1000000000000000000000000000004,
          1000000000000000000000000000003,
        ),
        tuple(
          '.balances("Bob")',
          999999999999999999999999999998,
          999999999999999999999999999999,
        ),
        tuple(
          '.step',
          1,
          2,
        ),
      ]),
      list([
        tuple(
          '.balances("Alice")',
          1000000000000000000000000000003,
          1000000000000000000000000000002,
        ),
        tuple(
          '.balances("Bob")',
          999999999999999999999999999999,
          1000000000000000000000000000000,
        ),
        tuple(
          '.step',
          2,
          3,
        ),
      ]),
      list([
        tuple(
          '.balances("Alice")',
          1000000000000000000000000000002,
          1000000000000000000000000000001,
        ),
        tuple(
          '.balances("Bob")',
          1000000000000000000000000000000,
          1000000000000000000000000000001,
        ),
        tuple(
          '.step',
          3,
          4,
        ),
      ]),
    ]),
  )
# ---
